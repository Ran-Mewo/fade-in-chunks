plugins {
    id 'fabric-loom' version '0.8-SNAPSHOT'
//	id("maven-publish")
}

archivesBaseName = "${project.archivesBaseName-mc${project.minecraftVersion}"
version = project.modVersion
group = project.mavenGroup

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraftVersion}")
    mappings("net.fabricmc:yarn:${project.yarnMappings}:v2")
    modImplementation("net.fabricmc:fabric-loader:${project.loaderVersion}")
    modImplementation("com.github.CaffeineMC:sodium-fabric:${project.sodiumVersion}")
}

tasks.processResources {
    inputs.property "version", modVersion)

	filesMatching("fabric.mod.json") {
		expand(mutableMapOf(
				"version" to modVersion
		))
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

tasks.withType<AbstractArchiveTask> {
	val archivesBaseName: String by project
	archiveBaseName.set(archivesBaseName)
}

tasks.jar {
	from("LICENSE.md")
	from("LICENSE.LESSER.md")
}

publishing {
	publications {
		create("mavenJava", MavenPublication::class.java) {
			artifact(tasks.remapJar) {
				builtBy(tasks.remapJar)
			}
		}
	}
}

repositories {
	maven("https://jitpack.io") {
		content {
			includeGroup("com.github.CaffeineMC")
		}
	}
}

def getVersionMetadata() {
    def build_id = System.getenv("GITHUB_RUN_NUMBER")

    // CI builds only
    if (build_id != null) {
        return "build.${build_id}"
    }

    if (grgit != null) {
        def head = grgit.head()
        def id = head.abbreviatedId

        // Flag the build if the build tree is not clean
        if (!grgit.status().clean) {
            id += "-dirty"
        }

        return "rev.${id}"
    }

    // No tracking information could be found about the build
    return "unknown"
}
